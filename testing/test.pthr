// def std_exp = @import("std_exp/std_exp.pthr");

// def test = @importCPP("test.h");



// type NonTrivial = struct {
// 	func delete = (this) -> Void {}
// 	func copy = (this) -> (output: This) { return...; }
// 	func move = (this) -> (output: This) { return...; }
// }



func extract_test = () -> Bool {
	def OPT_HELD_VALUE: Int = 12;

	var nt_opt: Int? = OPT_HELD_VALUE;
	const nt_opt_extracted: Int = nt_opt.extract();

	return nt_opt == null && nt_opt_extracted == OPT_HELD_VALUE;
}


func array_ref_test = () -> Bool {
	def ARR_SIZE: USize = 3;

	const arr = new [Int:ARR_SIZE][1, 2, 3];
	const arr_ref: [Int:*|] = arr as [Int:*|];

	return (&arr_ref).dimensions()[0].* == ARR_SIZE;
}




func entry = () #entry -> UI8 {
	return (extract_test() && array_ref_test()) as UI8;
}