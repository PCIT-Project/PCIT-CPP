def build = @import("build");


type Project = struct {

	func create = (warning_settings: @pthr.ProjectWarningSettings in) #rt -> This {
		return new Project{
			_project_id = @buildCreateProject("".* as [Char:*], forward warning_settings),
		};
	}

	func create = (warning_settings: @pthr.ProjectWarningSettings in, path: [Char:*]) #rt -> This {
		return new Project{
			_project_id = @buildCreateProject(path, forward warning_settings),
		};
	}




	func addSourceFile = (this, path: [Char:*]) #rt -> Void {
		@buildAddSourceFile(path, this._project_id);
	}
	

	const _project_id: @pthr.ProjectID;
}





func entry = () #entry -> UI8 {
	@buildSetOutput(build.Output.RUN);
	@buildSetNumThreads(12);
	@buildSetUseStdLib(false);

	const project: Project = Project.create(new @pthr.ProjectWarningSettings{
		methodCallOnNonMethod = true,
	});


	project.addSourceFile("test.pthr".* as [Char:*]);


	// @buildAddSourceFile("test.pthr".* as [Char:*], project_id);
	@buildAddCPPHeaderFile("test.h".* as [Char:*], true);
	
	return 0;
}

